version: "3"
services:
  # nginx:
  #   image: nginx:latest
  #   container_name: webserver
  #   restart: unless-stopped
  #   ports:
  #     - 9000:443
  #     - 9001:5678
  #     - 9002:3000
  #     - 9003:8069
  #     - 9004:8072
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - ./.secret/ssl/:/ssl/
  #     - ./data/nginx/log/:/var/log/nginx/

  # DATABASES
  # ////////////////////////////////////////////////////////////
  postgres:
    image: postgres:14
    user: root
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD        # run as a service
    volumes:
        - ./data/postgresql:/var/lib/postgresql/data
        - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    restart: always

  mysql:
    image: mysql:5.6
    environment:
      - MYSQL_ROOT_PASSWORD
    volumes:
        - ./data/mysql:/var/lib/mysql
    restart: always
    ports:
      - '3306:3306'

  redis:
    image: redis:alpine
    restart: always
    command: ["sh", "-c", "redis-server --requirepass \"$REDIS_PASSWORD\""]
    env_file: .env
    volumes:
      - /data/redis:/data
    ports:
      - '6379:6379'

  # APPSMITH 
  # ////////////////////////////////////////////////////////////
  # appsmith:
  #   image: index.docker.io/appsmith/appsmith-ce
  #   ports:
  #     - "3001:443"
  #     - "3000:80"
  #   volumes:
  #     - ./data/appsmith/stacks:/appsmith-stacks
  #   restart: unless-stopped
  #   labels:
  #     com.centurylinklabs.watchtower.enable: "true"

  # auto_update:
  #   image: containrrr/watchtower:latest-dev
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   # Update check interval in seconds.
  #   command: --schedule "0 0 * ? * *" --label-enable --cleanup
  #   restart: unless-stopped

  # ODOO 
  # ////////////////////////////////////////////////////////////

  odoo:
    image: odoo:15
    user: root
    depends_on:
      - postgres 
    ports:
      - "8069:8069"
      - "8072:8072" # live chat
    # tty: true
    # command: --
    environment:
      - HOST=postgres
      - USER=${POSTGRES_USER}
      - PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      #- /etc/timezone:/etc/timezone:ro
      #- /etc/localtime:/etc/localtime:ro
      # - ./entrypoint.sh:/entrypoint.sh   
      - ./app/odoo/addons:/mnt/extra-addons
      # - ./app/odoo/etc/odoo.conf:/etc/odoo/odoo.conf
      # - ./app/odoo/etc/requirements.txt:/etc/odoo/requirements.txt
      - ./data/odoo/data:/data/odoo
      - ./data/odoo/etc:/etc/odoo
    restart: always             # run as a service
    

  # N8N 
  # ////////////////////////////////////////////////////////////
  
  n8n:
    image: n8nio/n8n
    restart: always
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER
      - N8N_BASIC_AUTH_PASSWORD
    ports:
      - 5678:5678
    links:
      - postgres
    volumes:
      - ./data/n8n:/home/node/.n8n
    # Wait 5 seconds to start n8n to make sure that PostgreSQL is ready
    # when n8n tries to connect to it
    command: /bin/sh -c "sleep 5; n8n start"


  # TOOLJET 
  # ////////////////////////////////////////////////////////////

#   tooljet_client:
#     tty: true
#     stdin_open: true
#     image: tooljet/tooljet-client-ce:latest
#     restart: always
#     env_file: .env
#     depends_on:
#       - server
#     volumes:
#       - logs:/var/log/openresty/
#       - certs:/etc/resty-auto-ssl/
#       - fallbackcerts:/etc/fallback-certs
#     ports:
#       - 8082:80
#       # - 443:443
#     command: openresty -g "daemon off;"

#   server:
#     image: tooljet/tooljet-server-ce:latest
#     tty: true
#     stdin_open: true
#     restart: always
#     ports:
#       - 3000
#     env_file: .env
#     environment:
#       SERVE_CLIENT: "false"
#     command: npm run start:prod
#     depends_on:
#       - postgres

  # CUBE  
  # ////////////////////////////////////////////////////////////

  # cube:
  #   image: cubejs/cube:latest
  #   ports:
  #     - 4000:4000
  #   environment:
  #     - CUBEJS_DEV_MODE=true
  #   volumes:
  #     - ./app/cube/conf/:/cube/conf

  # Mautic 
  # ////////////////////////////////////////////////////////////

  mautic:
    image: mautic/mautic
    environment:
      - MAUTIC_DB_HOST
      # - MAUTIC_DB_USER
      - MAUTIC_DB_PASSWORD=${MYSQL_ROOT_PASSWORD}
      # - MAUTIC_DB_NAME
      - MAUTIC_RUN_CRON_JOBS
    ports:
      - 8080:80
    depends_on:
      - mysql
    restart: always
    volumes:
        - ./data/mautic:/var/www/html

  # Chatwoot 
  # ////////////////////////////////////////////////////////////
  base: &base
    image: chatwoot/chatwoot:latest
    env_file: .env ## Change this file for customized env variables
    volumes:
      - ./data/chatwoot:/app/storage

  rails:
    <<: *base
    depends_on:
      - postgres
      - redis
    ports:
      - '127.0.0.1:3000:3000'
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
    entrypoint: docker/entrypoints/rails.sh
    command: ['bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '0.0.0.0']

  sidekiq:
    <<: *base
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']

